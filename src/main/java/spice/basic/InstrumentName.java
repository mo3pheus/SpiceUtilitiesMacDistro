
package spice.basic;

/**
Class InstrumentName represents instrument-name mappings that
are initialized by specification of a instrument name.

<p> SPICE applications normally won't need to use
this class directly; they should use the class
{@link spice.basic.Instrument} instead.

<h3> Version 2.0.0 26-DEC-2016 (NJB)</h3>

Functional change: the getName method now returns a copy of the 
String value used to create the instance. Previously the name
was generated by converting the instance's name field to an ID,
then converting the ID back to a name.

Added deepCopy method.

<h3> Version 1.0.0 25-AUG-2009 (NJB)</h3>
*/
public class InstrumentName extends IDMap
{

   //
   // Fields
   //
   private String           instrumentName;


   //
   // Constructors
   //

   /**
   Create a new InstrumentName from a name string.
   */
   public InstrumentName ( String name )
   {
      instrumentName = new String(name);
   }

   /**
   Return the integer Instrument ID code of this InstrumentCode instance.
   The code is that associated with the name at the time of the call.
   */
   public int getIDCode()

      throws SpiceException
   {
      int IDcode = CSPICE.bods2c( instrumentName );

      return ( IDcode );
   }


   /**
   Return the instrument name associated with this ID code. The name
   is obtained by mapping the stored name to an ID code, then
   mapping that code to a name.
   */
   public String getName()

      throws SpiceException
   {
      return (  new String( instrumentName )  );
   }

   /**
   Return a deep copy of this instance.
   */
   public InstrumentName deepCopy()

      throws SpiceException
   {
      return (  new InstrumentName(this.instrumentName)  );
   }



}
