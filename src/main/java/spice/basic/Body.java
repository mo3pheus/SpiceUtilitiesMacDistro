
package spice.basic;

import spice.basic.CSPICE;


/**
Class Body is used to represent identities of ephemeris objects.

<p> This class takes the place of integer ID codes and body names
used by subroutine interfaces in SPICELIB and CSPICE.  However,
body names and codes are still used to construct Body objects:
either a name or NAIF integer code must be supplied in order to construct
a Body.

<p> Additionally, this class provides API methods for retrieving
certain data associated with ephemeris objects.  In particular,
PCK data associated with bodies, such as radii of triaxial ellipsoid
shape models, once loaded into the kernel database, may be retrieved
via methods of this class.

<p> See the documentation for class
{@link spice.basic.StateRecord}
for a usage example.


<h3> Version 2.0.0 26-DEC-2016 (NJB) </h3>

Functional change: the getName method now returns a copy of the 
String value used to create the instance, if the instance
was created using a name rather than an ID code. Previously the name
was generated by converting the instance's name field to an integer ID,
then converting the ID back to a name.

<p>The copy constructor now uses the stored IDMap instance's 
deepCopy method, rather than converting the stored instance to
an integer ID and using that to create a new instance. 

<h3> Version 1.1.0 08-APR-2011 (NJB) </h3>

<p>   Removed spurious check for ID code 0 from method
{@link #getIDCode()}.


<h3> Version 1.0.0 22-NOV-2009 (NJB) </h3>
*/
public class Body extends Object
{

   /*
   Instance variables
   */
   private IDMap               bodyID;


   /*
   Constructors
   */

   /**
   Construct a Body from a body name.
   */
   public Body ( String name )

      throws SpiceException
   {
      //
      // Reject blank or empty body names.
      //

      if ( name.equals( "" ) )
      {
         SpiceException exc = SpiceErrorException.create(

            "Body",
            "SPICE(EMPTYSTRING)",
            "Input body name string was empty." );

         throw ( exc );
      }
      else if ( name.trim().equals( "" ) )
      {
         SpiceException exc = SpiceErrorException.create(

            "Body",
            "SPICE(BLANKSTRING)",
            "Input body name string was blank." );

         throw ( exc );
      }



      bodyID = new BodyName ( name.trim() );
   }


   /**
   Construct a Body from an integer code.
   */
   public Body ( int code )

      throws SpiceErrorException
   {
      bodyID = new BodyCode( code );
   }


   /**
   Construct a Body from another Body. This constructor creates a deep copy.
   */
   public Body ( Body b )

      throws SpiceException
   {
      this.bodyID = b.bodyID.deepCopy();
   }


   /*
   Instance methods
   */


   /**
   Test two Bodies for equality.

   <p> The integer codes of the bodies are used for the comparison.
   */
   public boolean equals ( Object obj )
   {
       if (  !( obj instanceof Body )  )
       {
          return false;
       }

       //
       // Since this method overrides a method that doesn't
       // throw a SpiceException, this method can't throw
       // a SpiceException either. We'll have to catch that
       // exception if it occurs.
       //
       try
       {
          boolean retVal =  ( (Body)obj ).getIDCode() == this.getIDCode();

          return ( retVal );
       }
       catch ( SpiceException e )
       {
          return false;
       }
   }


   /**
   Return a hash code for this Body. This method overrides Object's
   hashcode() method.

   <p> Note that this method can't throw a SpiceException.
   */
   public int hashCode()
   {
      /*
      The hashcode value is the hash code of the Integer body ID.
      */
      try
      {
         Integer code = new Integer( this.getIDCode() );

         return (  code.hashCode() );
      }
      catch ( SpiceException e )
      {
         return ( 0 );
      }
   }


   /**
   Return NAIF ID code associated with a Body.
   */
   public int getIDCode()

      throws IDCodeNotFoundException, SpiceException
   {
      int IDCode  = bodyID.getIDCode();

      return ( IDCode );
   }


   /**
   Return name associated with a Body.
   */
   public String getName()

      throws SpiceException
   {
      String name = bodyID.getName();

      return ( name );
   }


   /**
   Return body name in String.  This method overrides Object's
   toString() method.

   Note that this method can't throw a SpiceException.
   */
   public String toString()
   {
      String name;

      try
      {
         name = new String (  this.getName() );
      }
      catch ( SpiceException se )
      {
         //
         // Return the exception's message as the name.
         //
         name = se.getMessage();
      }

      return ( name );
   }


   /**
   Return the double precision values of a kernel
   variable associated with this Body instance, where
   the kernel variable name has the form
   <pre>
      BODY&#60ID code&#62_&#60item&#62
   </pre>
   for example
   <pre>
      BODY599_RADII
   </pre>
   <p> The variable is specified by the "item" substring
   of the name. For example, for the radius variable above,
   the input string is
   <pre>
   "RADII"
   </pre>
   <p>The item name is case-sensitive.
   */
   public double[] getValues( String item )

      throws SpiceException
   {
      int code = this.getIDCode();

      double[] retval = CSPICE.bodvcd( code, item.trim() );

      return ( retval );
   }
}

