
package spice.tspice;


import java.io.*;
import java.util.*;
import spice.basic.*;
import spice.testutils.JNITestutils;
import spice.testutils.Testutils;
import static spice.basic.AngularUnits.*;

/**
Class TestRADecCoordinates provides methods that
implement test families for the class RADecCoordinates.

<p>Version 1.0.0 23-NOV-2009 (NJB)
*/

public class TestRADecCoordinates extends Object
{
   //
   // Class constants
   //


   //
   // Class variables
   //


   //
   // Methods
   //

   /**
   Test RADecCoordinates and associated classes.
   */
   public static boolean f_RADecCoordinates()

      throws SpiceException
   {
      //
      // Constants
      //
      final double                      TIGHT_TOL = 1.e-12;
      final double                      MED_TOL   = 1.e-9;
      final double                      SQ3       = Math.sqrt(3.0);

      //
      // Local variables
      //
      Body                              Earth;

      RADecCoordinates                  radec1;
      RADecCoordinates                  radec2;

      Matrix33                          jac1;
      Matrix33                          jac2;
      Matrix33                          invmat;

      Vector3                           pos;
      Vector3                           xPos;

      boolean                           ok;

      double                            Dec;
      double                            RA;
      double                            dist;
      double                            radius;
      double                            xDec;
      double                            xRA;
      double                            xRadius;
      double[]                          radii;


      //
      //  We enclose all tests in a try/catch block in order to
      //  facilitate handling unexpected exceptions.  Unexpected
      //  exceptions are trapped by the catch block at the end of
      //  the routine; expected exceptions are handled locally by
      //  catch blocks associated with error handling test cases.
      //
      //  Therefore, JNISpice calls that are expected to succeed don't
      //  have any subsequent "chckxc" type calls following them, nor
      //  are they wrapped in in try/catch blocks.
      //
      //  Expected exceptions that are *not* thrown are tested
      //  via a call to {@link spice.testutils.Testutils#dogDidNotBark}.
      //

      try
      {

         JNITestutils.topen ( "f_RADecCoordinates" );




         // ***********************************************************
         //
         //    Error cases
         //
         // ***********************************************************


         //
         // We don't need to test every exception that can occur, but
         // we must:
         //
         //    - Test every exception generated in the Java API layer.
         //
         //    - Test at least one exception generated by CSPICE for
         //      every CSPICE class wrapper.
         //



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative radius in RA/dec/radius-" +
                               "based constructor call. "   );

         try
         {
            radius = -1.0;
            RA     = 0.5;
            Dec    = 0.25;

            radec1 = new RADecCoordinates( radius, RA, Dec );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(VALUEOUTOFRANGE)", ex );
         }

         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: singular input case in rectangular to " +
                               "RA/Dec vector-based Jacobian call. "   );

         try
         {

            pos  = new Vector3( 0.0, 0.0, 0.0 );

            jac1 = RADecCoordinates.getRecRADJacobian( pos );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(POINTONZAXIS)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(POINTONZAXIS)", ex );
         }







         // ***********************************************************
         //
         //    Normal cases
         //
         // ***********************************************************


         //
         // Constructor tests:
         //


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct RA/Dec coordinates for a surface " +
                              "point on the unit sphere. Use scalar RA/Dec " +
                              "coordinate constructor."                       );

         RA     = 30.0 * RPD;
         Dec    = 60.0 * RPD;
         radius =  1.0;

         radec1 = new RADecCoordinates( radius, RA, Dec );

         pos    = radec1.toRectangular();

         ok  = JNITestutils.chcksd ( "X coordinate",
                                     pos.toArray()[0],
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Y coordinate",
                                     pos.toArray()[1],
                                     "~",
                                     0.25,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Z coordinate",
                                     pos.toArray()[2],
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct RA/Dec coordinates for a surface " +
                              "point on the Earth.  Use scalar RA/Dec " +
                              "coordinate constructor."                      );


         RA     = 30.0 * RPD;
         Dec    = 60.0 * RPD;
         radius = 6370.0;

         radec1 = new RADecCoordinates( radius, RA, Dec );



         ok  = JNITestutils.chcksd ( "RA",
                                     radec1.getRightAscension(),
                                     "~",
                                     RA,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Dec",
                                     radec1.getDeclination(),
                                     "~",
                                     Dec,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     radec1.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test copy constructor." );


         radec2 = new RADecCoordinates( radec1 );

         //
         // Change radec1; make sure radec2 remains unchanged.
         //
         radec1 = new RADecCoordinates( 1000.0, 1.0, 2.0 );



         ok  = JNITestutils.chcksd ( "RA",
                                     radec2.getRightAscension(),
                                     "~",
                                     RA,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Dec",
                                     radec2.getDeclination(),
                                     "~",
                                     Dec,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     radec2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct RA/Dec coordinates from " +
                              "a vector."                              );


         //
         // Generate the vector we'll use.
         //
         RA     = 230.0 * RPD;
         Dec    = 60.0  * RPD;
         radius = 6370.0;

         radec1 = new RADecCoordinates( radius, RA, Dec );

         pos = radec1.toRectangular();


         //
         // Convert the vector back to RA/Dec coordinates.
         //
         radec2 = new RADecCoordinates( pos );


         ok  = JNITestutils.chcksd ( "RA",
                                     radec2.getRightAscension(),
                                     "~",
                                     RA,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Dec",
                                     radec2.getDeclination(),
                                     "~",
                                     Dec,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     radec2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getRADRecJacobian: verify Jacobian matrix " +
                              "for certain trivial cases."                   );


         //
         // Generate the coordinates we'll use for the RA/Dec-to-
         // rectangular transformation.
         //

         RA     = 30.0 * RPD;
         Dec    = 60.0 * RPD;
         radius =  2.0;

         radec1   = new RADecCoordinates( radius, RA, Dec );

         jac1   = radec1.getRADRecJacobian();


         //
         // At pos, x == (rad)*cos(dec)*cos(RA); dx/drad
         // == cos(dec)*cos(RA) == 0.5*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/drad",
                                     jac1.getElt(0,0),
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL );

         //
         // At pos, y == (rad)*cos(dec)*sin(RA); dy/drad
         // == cos(dec)*sin(RA) == 0.5*0.5
         //

         ok  = JNITestutils.chcksd ( "dy/drad",
                                     jac1.getElt(1,0),
                                     "~",
                                     0.25,
                                     TIGHT_TOL );

         //
         // At pos, z == (rad)*sin(dec); dz/drad
         // == sin(dec) == sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dz/drad",
                                     jac1.getElt(2,0),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );


         //
         // At pos, x == 2*cos(dec)*cos(RA); dx/dRA
         // == -2*cos(dec)*sin(RA) == -2 * 0.5 * 0.5
         //

         ok  = JNITestutils.chcksd ( "dx/dRA",
                                     jac1.getElt(0,1),
                                     "~",
                                     -0.5,
                                     TIGHT_TOL );
         //
         // At pos, y == 2*cos(dec)*sin(RA); dy/dRA
         // == 2*cos(dec)*cos(RA) == 2 * 0.5 * sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dy/dRA",
                                     jac1.getElt(1,1),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*sin(dec); dz/dRA == 0
         //

         ok  = JNITestutils.chcksd ( "dz/dRA",
                                     jac1.getElt(2,1),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // At pos, x == 2*cos(dec)*cos(RA); dx/ddec
         // == -2*sin(dec)*cos(RA) == -2*(sqrt(3)/2)*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/ddec",
                                     jac1.getElt(0,2),
                                     "~",
                                     -1.5,
                                     TIGHT_TOL );

         //
         // At pos, y == 2*cos(dec)*sin(RA); dy/ddec
         // == -2*sin(dec)*sin(RA) == -sqrt(3)/2
         //
         ok  = JNITestutils.chcksd ( "dy/ddec",
                                     jac1.getElt(1,2),
                                     "~",
                                     -SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*sin(dec); dz/ddec == 2*cos(dec) == 1
         //
         ok  = JNITestutils.chcksd ( "dz/ddec",
                                     jac1.getElt(2,2),
                                     "~",
                                     1.0,
                                     TIGHT_TOL );





         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getRADRecJacobian: verify Jacobian matrix " +
                              "is inverse of that obtained from " +
                              "getRecRADJacobian."                          );


         //
         // Generate the coordinates we'll use for the RA/Dec-to-
         // rectangular transformation.

         RA     = 30.0 * RPD;
         Dec    = 60.0 * RPD;
         radius = 6370.0;

         radec1   = new RADecCoordinates( radius, RA, Dec );

         jac1   = radec1.getRADRecJacobian();

         pos    = radec1.toRectangular();

         jac2   = RADecCoordinates.getRecRADJacobian( pos );

         invmat = jac2.invert();

         dist   = jac1.dist( invmat );


         ok  = JNITestutils.chcksd ( "dist",
                                     dist,
                                     "~",
                                     0.0,
                                     MED_TOL );

         //System.out.println( invmat );
      }

      catch ( SpiceException ex )
      {
         //
         //  Getting here means we've encountered an unexpected
         //  SPICE exception.  This is analogous to encountering
         //  an unexpected SPICE error in CSPICE.
         //

         ex.printStackTrace();

         ok = JNITestutils.chckth ( false, "", ex );
      }

      //
      // Retrieve the current test status.
      //
      ok = JNITestutils.tsuccess();

      return ( ok );
   }

}

