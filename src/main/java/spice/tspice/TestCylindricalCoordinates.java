
package spice.tspice;


import java.io.*;
import java.util.*;
import spice.basic.*;
import spice.testutils.JNITestutils;
import spice.testutils.Testutils;
import static spice.basic.AngularUnits.*;

/**
Class TestCylindricalCoordinates provides methods that
implement test families for the class CylindricalCoordinates.

<p>Version 1.0.0 30-APR-2010 (NJB)
*/
public class TestCylindricalCoordinates extends Object
{

   //
   // Class constants
   //


   //
   // Class variables
   //


   //
   // Methods
   //

   /**
   Test CylindricalCoordinates and associated classes.
   */
   public static boolean f_CylindricalCoordinates()

      throws SpiceException
   {
      //
      // Constants
      //

      //
      // Note: TIGHT_TOL has been loosened by a factor of 10
      // to enable clean operation on the PC/Linux/gcc/32bit
      // platform.
      //
      final double                      TIGHT_TOL = 1.e-11;
      final double                      SQ3       = Math.sqrt(3.0);
      //
      // Local variables
      //
      Body                              Earth;

      CylindricalCoordinates            cyl1;
      CylindricalCoordinates            cyl2;

      Matrix33                          jac1;
      Matrix33                          jac2;
      Matrix33                          invmat;

      Vector3                           pos;
      Vector3                           xPos;

      boolean                           ok;

      double                            dist;
      double                            z;
      double                            longitude;
      double[]                          radii;
      double                            radius;
      double                            xZ;
      double                            xLongitude;
      double                            xRadius;


      //
      //  We enclose all tests in a try/catch block in order to
      //  facilitate handling unexpected exceptions.  Unexpected
      //  exceptions are trapped by the catch block at the end of
      //  the routine; expected exceptions are handled locally by
      //  catch blocks associated with error handling test cases.
      //
      //  Therefore, JNISpice calls that are expected to succeed don't
      //  have any subsequent "chckxc" type calls following them, nor
      //  are they wrapped in in try/catch blocks.
      //
      //  Expected exceptions that are *not* thrown are tested
      //  via a call to {@link spice.testutils.Testutils#dogDidNotBark}.
      //

      try
      {

         JNITestutils.topen ( "f_CylindricalCoordinates" );




         // ***********************************************************
         //
         //    Error cases
         //
         // ***********************************************************


         //
         // We don't need to test every exception that can occur, but
         // we must:
         //
         //    - Test every exception generated in the Java API layer.
         //
         //    - Test at least one exception generated by CSPICE for
         //      every CSPICE class wrapper.
         //



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative radius in lat/lon/radius-" +
                               "based constructor call. "                     );

         try
         {
            radius    = -1.0;
            longitude = 0.5;
            z         = 0.25;

            cyl1 = new CylindricalCoordinates( radius, longitude, z );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(VALUEOUTOFRANGE)", ex );
         }

         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: singular input case in rectangular to " +
                               "cylindrical vector-based Jacobian call. "   );

         try
         {

            pos  = new Vector3( 0.0, 0.0, 0.0 );

            jac1 = CylindricalCoordinates.getRecCylJacobian( pos );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(POINTONZAXIS)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(POINTONZAXIS)", ex );
         }







         // ***********************************************************
         //
         //    Normal cases
         //
         // ***********************************************************


         //
         // Constructor tests:
         //


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct cylindrical coordinates for a " +
                              "surface point on a unit radius cylinder. " +
                              "Use scalar cylindrical coordinate " +
                              "constructor."                                 );

         longitude = 30.0 * RPD;
         z         = 10.0;
         radius    =  1.0;

         cyl1 = new CylindricalCoordinates( radius, longitude, z );

         pos  = cyl1.toRectangular();

         ok  = JNITestutils.chcksd ( "X coordinate",
                                     pos.toArray()[0],
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Y coordinate",
                                     pos.toArray()[1],
                                     "~",
                                     0.5,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Z coordinate",
                                     pos.toArray()[2],
                                     "~",
                                     10.0,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct cylindrical coordinates for a " +
                              "surface point on the Earth.  Use scalar " +
                              "cylindrical coordinate constructor."          );


         longitude = 230.0 * RPD;
         z         = 50.0;
         radius    = 6370.0;

         cyl1 = new CylindricalCoordinates( radius, longitude, z );



         ok  = JNITestutils.chcksd ( "longitude",
                                     cyl1.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "z",
                                     cyl1.getZ(),
                                     "~",
                                     z,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     cyl1.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test copy constructor." );


         longitude = 30.0 * RPD;
         z         =  0.0;
         radius    = 6370.0;

         cyl1 = new CylindricalCoordinates( radius, longitude, z );

         cyl2 = new CylindricalCoordinates( cyl1 );

         //
         // Change cyl1; make sure cyl2 remains unchanged.
         //
         cyl1 = new CylindricalCoordinates( 1000.0, 1.0, 2.0 );



         ok  = JNITestutils.chcksd ( "longitude",
                                     cyl2.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "z",
                                     cyl2.getZ(),
                                     "~",
                                     z,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     cyl2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct cylindrical coordinates from " +
                              "a vector."                              );


         //
         // Generate the vector we'll use.
         //
         longitude = 30.0 * RPD;
         z         = 10.0;
         radius    = 6370.0;

         cyl1 = new CylindricalCoordinates( radius, longitude, z );

         pos = cyl1.toRectangular();


         //
         // Convert the vector back to cylindrical coordinates.
         //
         cyl2 = new CylindricalCoordinates( pos );


         ok  = JNITestutils.chcksd ( "longitude",
                                     cyl2.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "z",
                                     cyl2.getZ(),
                                     "~",
                                     z,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     cyl2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getCylRecJacobian: verify Jacobian matrix " +
                              "for certain trivial cases."                   );


         //
         // Generate the coordinates we'll use for the cylindrical-to-
         // rectangular transformation.
         //

         longitude = 30.0 * RPD;
         z         = 10.0;
         radius    =  2.0;

         cyl1   = new CylindricalCoordinates( radius, longitude, z );

         jac1   = cyl1.getCylRecJacobian();


         //
         // At pos, x == (rad)*cos(lon); dx/drad
         // == cos(lon) == sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dx/drad",
                                     jac1.getElt(0,0),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, y == (rad)*sin(lon); dy/drad
         // == sin(lon) == 0.5
         //

         ok  = JNITestutils.chcksd ( "dy/drad",
                                     jac1.getElt(1,0),
                                     "~",
                                     0.5,
                                     TIGHT_TOL );

         //
         // dz/drad is always 0
         //

         ok  = JNITestutils.chcksd ( "dz/drad",
                                     jac1.getElt(2,0),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );


         //
         // At pos, x == 2*cos(lon); dx/dlon
         // == -2*sin(lon) == -2 * 0.5
         //

         ok  = JNITestutils.chcksd ( "dx/dlon",
                                     jac1.getElt(0,1),
                                     "~",
                                     -1.0,
                                     TIGHT_TOL );
         //
         // At pos, y == 2*sin(lon); dy/dlon
         // == 2*cos(lon) == 2 * sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dy/dlon",
                                     jac1.getElt(1,1),
                                     "~",
                                     SQ3,
                                     TIGHT_TOL );

         //
         // dz/dlon is always 0
         //

         ok  = JNITestutils.chcksd ( "dz/dlon",
                                     jac1.getElt(2,1),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // dx/dz is always 0
         //

         ok  = JNITestutils.chcksd ( "dx/dz",
                                     jac1.getElt(0,2),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // dy/dz is always 0
         //
         ok  = JNITestutils.chcksd ( "dy/dz",
                                     jac1.getElt(1,2),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // dz/dz is always 1
         //
         ok  = JNITestutils.chcksd ( "dz/dz",
                                     jac1.getElt(2,2),
                                     "~",
                                     1.0,
                                     TIGHT_TOL );





         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getCylRecJacobian: verify Jacobian matrix " +
                              "is inverse of that obtained from " +
                              "getRecCylJacobian."                          );


         //
         // Generate the coordinates we'll use for the cylindrical-to-
         // rectangular transformation.

         longitude = 30.0 * RPD;
         z         = 10.0;
         radius    = 6370.0;

         cyl1   = new CylindricalCoordinates( radius, longitude, z );

         jac1   = cyl1.getCylRecJacobian();

         pos    = cyl1.toRectangular();

         jac2   = CylindricalCoordinates.getRecCylJacobian( pos );

         invmat = jac2.invert();

         dist   = jac1.dist( invmat );


         ok  = JNITestutils.chcksd ( "dist",
                                     dist,
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //System.out.println( invmat );
      }

      catch ( SpiceException ex )
      {
         //
         //  Getting here means we've encountered an unexpected
         //  SPICE exception.  This is analogous to encountering
         //  an unexpected SPICE error in CSPICE.
         //

         ex.printStackTrace();

         ok = JNITestutils.chckth ( false, "", ex );
      }

      //
      // Retrieve the current test status.
      //
      ok = JNITestutils.tsuccess();

      return ( ok );
   }

}

