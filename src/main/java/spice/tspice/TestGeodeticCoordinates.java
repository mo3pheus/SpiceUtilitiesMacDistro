
package spice.tspice;


import java.io.*;
import java.util.*;
import spice.basic.*;
import spice.testutils.JNITestutils;
import spice.testutils.Testutils;
import static spice.basic.AngularUnits.*;

/**
Class TestGeodeticCoordinates provides methods that implement test families for
the class GeodeticCoordinates.

<p>Version 1.0.0 23-NOV-2009 (NJB)
*/
public class TestGeodeticCoordinates extends Object
{

   //
   // Class constants
   //


   //
   // Class variables
   //


   //
   // Methods
   //

   /**
   Test GeodeticCoordinates and associated classes.
   */
   public static boolean f_GeodeticCoordinates()

      throws SpiceException
   {
      //
      // Constants
      //
      final double                      TIGHT_TOL = 1.e-12;
      final double                      SQ3       = Math.sqrt(3.0);

      //
      // Local variables
      //
      Body                              Earth;

      GeodeticCoordinates               geo;
      GeodeticCoordinates               geo2;

      Matrix33                          jac1;
      Matrix33                          jac2;
      Matrix33                          invmat;

      Vector3                           pos;
      Vector3                           xPos;

      boolean                           ok;

      double                            altitude;
      double                            dist;
      double                            f;
      double                            latitude;
      double                            longitude;
      double[]                          radii;
      double                            re;
      double                            rp;
      double                            xAltitude;
      double                            xLatitude;
      double                            xLongitude;


      //
      //  We enclose all tests in a try/catch block in order to
      //  facilitate handling unexpected exceptions.  Unexpected
      //  exceptions are trapped by the catch block at the end of
      //  the routine; expected exceptions are handled locally by
      //  catch blocks associated with error handling test cases.
      //
      //  Therefore, JNISpice calls that are expected to succeed don't
      //  have any subsequent "chckxc" type calls following them, nor
      //  are they wrapped in in try/catch blocks.
      //
      //  Expected exceptions that are *not* thrown are tested
      //  via a call to {@link spice.testutils.Testutils#dogDidNotBark}.
      //

      try
      {

         JNITestutils.topen ( "f_GeodeticCoordinates" );




         // ***********************************************************
         //
         //    Error cases
         //
         // ***********************************************************


         //
         // We don't need to test every exception that can occur, but
         // we must:
         //
         //    - Test every exception generated in the Java API layer.
         //
         //    - Test at least one exception generated by CSPICE for
         //      every CSPICE class wrapper.
         //

         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative re in rectangular to " +
                               "geodetic lon/lat-based constructor call. "   );

         try
         {
            re  = -1.e4;
            f   =  0.1;

            longitude = 2.0;
            latitude  = 0.5;
            altitude  = 1.e3;

            geo = new GeodeticCoordinates( longitude, latitude, altitude,
                                                                       re, f );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true, "SPICE(VALUEOUTOFRANGE)", ex );

            if ( !ok )
            {
               //
               // For debugging
               //ex.printStackTrace();
            }
         }


         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative re in rectangular to " +
                               "geodetic vector-based constructor call. "   );

         try
         {
            re   =  -1.e4;
            f    =  0.1;

            pos  = new Vector3( 1.e4, 1.5e4, 7.e3 );

            geo = new GeodeticCoordinates( pos, re, f );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(VALUEOUTOFRANGE)", ex );
         }

         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative re in rectangular to " +
                               "geodetic vector-based Jacobian call. "   );

         try
         {
            re   =  -1.e4;
            f    =  0.1;

            pos  = new Vector3( 1.e4, 1.5e4, 7.e3 );

            jac1 = GeodeticCoordinates.getRecGeoJacobian( pos, re, f );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(BADRADIUS)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(BADRADIUS)", ex );
         }



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: f > 1 in " +
                               "geodetic constructor call. "             );

         try
         {
            re  =  1.e4;
            f   =  1.1;

            pos = new Vector3( 1.e4, 1.5e4, 7.e3 );

            geo = new GeodeticCoordinates( pos, re, f );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(VALUEOUTOFRANGE)", ex );
         }






         // ***********************************************************
         //
         //    Normal cases
         //
         // ***********************************************************


         //
         // Constructor tests:
         //


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct geodetic coordinates for a surface " +
                              "point on the unit sphere. Use scalar geodetic " +
                              "coordinate constructor."                       );

         re        = 1.0;
         f         = 0.0;

         longitude = 30.0 * RPD;
         latitude  = 60.0 * RPD;
         altitude  =  0.0;

         geo = new GeodeticCoordinates( longitude, latitude, altitude, re, f );

         pos = geo.toRectangular();

         ok  = JNITestutils.chcksd ( "X coordinate",
                                     pos.toArray()[0],
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Y coordinate",
                                     pos.toArray()[1],
                                     "~",
                                     0.25,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Z coordinate",
                                     pos.toArray()[2],
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct geodetic coordinates for a surface " +
                              "point on the Earth.  Use scalar geodetic " +
                              "coordinate constructor."                      );


         re        = 6378.14;
         rp        = 6356.75;
         f         = ( re - rp ) / re;

         longitude = 30.0 * RPD;
         latitude  = 60.0 * RPD;
         altitude  = 10.0;

         geo = new GeodeticCoordinates( longitude, latitude, altitude, re, f );



         ok  = JNITestutils.chcksd ( "longitude",
                                     geo.getLongitude(),
                                     "~/",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "latitude",
                                     geo.getLatitude(),
                                     "~/",
                                     latitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "altitude",
                                     geo.getAltitude(),
                                     "~/",
                                     altitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "RE",
                                     geo.getEquatorialRadius(),
                                     "~/",
                                     re,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "F",
                                     geo.getFlatteningCoefficient(),
                                     "~/",
                                     f,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test copy constructor." );


         geo2 = new GeodeticCoordinates( geo );

         //
         // Change geo; make sure geo2 remains unchanged.
         //
         geo = new GeodeticCoordinates( 1.0, 2.0, -1000.0, re/2, f/2 );



         ok  = JNITestutils.chcksd ( "longitude",
                                     geo2.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "latitude",
                                     geo2.getLatitude(),
                                     "~",
                                     latitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "altitude",
                                     geo2.getAltitude(),
                                     "~",
                                     altitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "RE",
                                     geo2.getEquatorialRadius(),
                                     "~",
                                     re,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "F",
                                     geo2.getFlatteningCoefficient(),
                                     "~",
                                     f,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct geodetic coordinates from " +
                              "a vector."                              );


         //
         // Generate the vector we'll use.
         //
         re        = 6378.14;
         rp        = 6356.75;

         f         = ( re - rp ) / re;

         longitude = 30.0 * RPD;
         latitude  = 60.0 * RPD;
         altitude  = 10.0;

         geo = new GeodeticCoordinates( longitude, latitude, altitude, re, f );

         pos = geo.toRectangular();


         //
         // Convert the vector back to geodetic coordinates.
         //
         geo2 = new GeodeticCoordinates( pos, re, f );


         ok  = JNITestutils.chcksd ( "longitude",
                                     geo2.getLongitude(),
                                     "~/",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "latitude",
                                     geo2.getLatitude(),
                                     "~/",
                                     latitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "altitude",
                                     geo2.getAltitude(),
                                     "~/",
                                     altitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "RE",
                                     geo2.getEquatorialRadius(),
                                     "~/",
                                     re,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "F",
                                     geo2.getFlatteningCoefficient(),
                                     "~/",
                                     f,
                                     TIGHT_TOL          );




         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getGeoRecJacobian: verify Jacobian matrix " +
                              "for certain trivial cases."                   );


         //
         // Generate the coordinates we'll use for the geodetic-to-
         // rectangular transformation.
         //
         re        = 2.0;
         rp        = 2.0;

         f         = ( re - rp ) / re;

         longitude = 30.0 * RPD;
         latitude  = 60.0 * RPD;
         altitude  =  0.0;

         geo    = new GeodeticCoordinates( longitude, latitude, altitude,
                                                                       re, f );

         jac1   = geo.getGeoRecJacobian();


         //
         // At pos, x == 2*cos(lat)*cos(lon); dx/dlon
         // == -2*cos(lat)*sin(lon) == -2 * 0.5 * 0.5
         //

         ok  = JNITestutils.chcksd ( "dx/dlon",
                                     jac1.getElt(0,0),
                                     "~",
                                     -0.5,
                                     TIGHT_TOL );
         //
         // At pos, y == 2*cos(lat)*sin(lon); dy/dlon
         // == 2*cos(lat)*cos(lon) == 2 * 0.5 * sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dy/dlon",
                                     jac1.getElt(1,0),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*sin(lat); dz/dlon == 0
         //

         ok  = JNITestutils.chcksd ( "dz/dlon",
                                     jac1.getElt(2,0),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // At pos, x == 2*cos(lat)*cos(lon); dx/dlat
         // == -2*sin(lat)*cos(lon) == -2*(sqrt(3)/2)*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/dlat",
                                     jac1.getElt(0,1),
                                     "~",
                                     -1.5,
                                     TIGHT_TOL );

         //
         // At pos, y == 2*cos(lat)*sin(lon); dy/dlat
         // == -2*sin(lat)*sin(lon) == -sqrt(3)/2
         //
         ok  = JNITestutils.chcksd ( "dy/dlat",
                                     jac1.getElt(1,1),
                                     "~",
                                     -SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*sin(lat); dz/dlat == 2*cos(lat) == 1
         //
         ok  = JNITestutils.chcksd ( "dz/dlat",
                                     jac1.getElt(2,1),
                                     "~",
                                     1.0,
                                     TIGHT_TOL );



         //
         // At pos, x == (2+alt)*cos(lat)*cos(lon); dx/dalt
         // == cos(lat)*cos(lon) == 0.5*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/dalt",
                                     jac1.getElt(0,2),
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL );

         //
         // At pos, y == (2+alt)*cos(lat)*sin(lon); dy/dalt
         // == cos(lat)*sin(lon) == 0.5*0.5
         //

         ok  = JNITestutils.chcksd ( "dy/dalt",
                                     jac1.getElt(1,2),
                                     "~",
                                     0.25,
                                     TIGHT_TOL );

         //
         // At pos, z == (2+alt)*sin(lat); dz/dalt
         // == sin(lat) == sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dz/dalt",
                                     jac1.getElt(2,2),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getGeoRecJacobian: verify Jacobian matrix " +
                              "is inverse of that obtained from " +
                              "getRecGeoJacobian."                          );


         //
         // Generate the coordinates we'll use for the geodetic-to-
         // rectangular transformation.
         //
         re        = 6378.14;
         rp        = 6356.75;

         f         = ( re - rp ) / re;

         longitude = 30.0 * RPD;
         latitude  = 60.0 * RPD;
         altitude  = 10.0;

         geo    = new GeodeticCoordinates( longitude, latitude, altitude,
                                                                       re, f );

         jac1   = geo.getGeoRecJacobian();

         pos    = geo.toRectangular();

         jac2   = GeodeticCoordinates.getRecGeoJacobian( pos, re, f );

         invmat = jac2.invert();

         dist   = jac1.dist( invmat );


         ok  = JNITestutils.chcksd ( "dist",
                                     dist,
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //System.out.println( invmat );
      }

      catch ( SpiceException ex )
      {
         //
         //  Getting here means we've encountered an unexpected
         //  SPICE exception.  This is analogous to encountering
         //  an unexpected SPICE error in CSPICE.
         //

         ex.printStackTrace();

         ok = JNITestutils.chckth ( false, "", ex );
      }

      //
      // Retrieve the current test status.
      //
      ok = JNITestutils.tsuccess();

      return ( ok );
   }

}

