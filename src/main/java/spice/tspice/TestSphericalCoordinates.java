
package spice.tspice;


import java.io.*;
import java.util.*;
import spice.basic.*;
import spice.testutils.JNITestutils;
import spice.testutils.Testutils;
import static spice.basic.AngularUnits.*;

/**
Class TestSphericalCoordinates provides methods that
implement test families for the class SphericalCoordinates.

<p>Version 1.0.0 23-NOV-2009 (NJB)
*/
public class TestSphericalCoordinates extends Object
{

   //
   // Class constants
   //


   //
   // Class variables
   //


   //
   // Methods
   //

   /**
   Test SphericalCoordinates and associated classes.
   */
   public static boolean f_SphericalCoordinates()

      throws SpiceException
   {
      //
      // Constants
      //
      final double                      TIGHT_TOL = 1.e-12;
      final double                      MED_TOL   = 1.e-9;
      final double                      SQ3       = Math.sqrt(3.0);

      //
      // Local variables
      //
      Body                              Earth;

      SphericalCoordinates              sph1;
      SphericalCoordinates              sph2;

      Matrix33                          jac1;
      Matrix33                          jac2;
      Matrix33                          invmat;

      Vector3                           pos;
      Vector3                           xPos;

      boolean                           ok;

      double                            colatitude;
      double                            dist;
      double                            longitude;
      double                            radius;
      double                            xColatitude;
      double                            xLongitude;
      double                            xRadius;
      double[]                          radii;


      //
      //  We enclose all tests in a try/catch block in order to
      //  facilitate handling unexpected exceptions.  Unexpected
      //  exceptions are trapped by the catch block at the end of
      //  the routine; expected exceptions are handled locally by
      //  catch blocks associated with error handling test cases.
      //
      //  Therefore, JNISpice calls that are expected to succeed don't
      //  have any subsequent "chckxc" type calls following them, nor
      //  are they wrapped in in try/catch blocks.
      //
      //  Expected exceptions that are *not* thrown are tested
      //  via a call to {@link spice.testutils.Testutils#dogDidNotBark}.
      //

      try
      {

         JNITestutils.topen ( "f_SphericalCoordinates" );




         // ***********************************************************
         //
         //    Error cases
         //
         // ***********************************************************


         //
         // We don't need to test every exception that can occur, but
         // we must:
         //
         //    - Test every exception generated in the Java API layer.
         //
         //    - Test at least one exception generated by CSPICE for
         //      every CSPICE class wrapper.
         //



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: negative radius in lat/lon/radius-" +
                               "based constructor call. "   );

         try
         {
            radius      = -1.0;
            longitude   = 0.5;
            colatitude  = 0.25;

            sph1 = new SphericalCoordinates( radius, colatitude, longitude );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(VALUEOUTOFRANGE)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(VALUEOUTOFRANGE)", ex );
         }

         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: singular input case in rectangular to " +
                               "spherical vector-based Jacobian call. "   );

         try
         {

            pos  = new Vector3( 0.0, 0.0, 0.0 );

            jac1 = SphericalCoordinates.getRecSphJacobian( pos );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(POINTONZAXIS)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(POINTONZAXIS)", ex );
         }







         // ***********************************************************
         //
         //    Normal cases
         //
         // ***********************************************************


         //
         // Constructor tests:
         //


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct spherical coordinates for a " +
                              "surface point on the unit sphere. Use " +
                              "scalar spherical coordinate constructor." );

         longitude   = 30.0 * RPD;
         colatitude  = 30.0 * RPD;
         radius      =  1.0;

         sph1 = new SphericalCoordinates( radius, colatitude, longitude );

         pos  = sph1.toRectangular();

         ok  = JNITestutils.chcksd ( "X coordinate",
                                     pos.toArray()[0],
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Y coordinate",
                                     pos.toArray()[1],
                                     "~",
                                     0.25,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "Z coordinate",
                                     pos.toArray()[2],
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct spherical coordinates for a " +
                              "surface point on the Earth.  Use scalar " +
                              "spherical coordinate constructor."            );


         longitude   = 30.0 * RPD;
         colatitude  = 30.0 * RPD;
         radius      = 6370.0;

         sph1 = new SphericalCoordinates( radius, colatitude, longitude );



         ok  = JNITestutils.chcksd ( "longitude",
                                     sph1.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "colatitude",
                                     sph1.getColatitude(),
                                     "~",
                                     colatitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     sph1.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test copy constructor." );


         sph2 = new SphericalCoordinates( sph1 );

         //
         // Change sph1; make sure sph2 remains unchanged.
         //
         sph1 = new SphericalCoordinates( 1000.0, 1.0, 2.0 );



         ok  = JNITestutils.chcksd ( "longitude",
                                     sph2.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "colatitude",
                                     sph2.getColatitude(),
                                     "~",
                                     colatitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     sph2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Construct spherical coordinates from " +
                              "a vector."                              );


         //
         // Generate the vector we'll use.
         //
         longitude   = 30.0 * RPD;
         colatitude  = 30.0 * RPD;
         radius      = 6370.0;

         sph1 = new SphericalCoordinates( radius, colatitude, longitude );

         pos = sph1.toRectangular();


         //
         // Convert the vector back to spherical coordinates.
         //
         sph2 = new SphericalCoordinates( pos );


         ok  = JNITestutils.chcksd ( "longitude",
                                     sph2.getLongitude(),
                                     "~",
                                     longitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "colatitude",
                                     sph2.getColatitude(),
                                     "~",
                                     colatitude,
                                     TIGHT_TOL          );

         ok  = JNITestutils.chcksd ( "radius",
                                     sph2.getRadius(),
                                     "~",
                                     radius,
                                     TIGHT_TOL          );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getSphRecJacobian: verify Jacobian matrix " +
                              "for certain trivial cases."                   );


         //
         // Generate the coordinates we'll use for the spherical-to-
         // rectangular transformation.
         //

         longitude   = 30.0 * RPD;
         colatitude  = 30.0 * RPD;
         radius      =  2.0;

         sph1   = new SphericalCoordinates( radius, colatitude, longitude );

         jac1   = sph1.getSphRecJacobian();


         //
         // At pos, x == (rad)*sin(colat)*cos(lon); dx/drad
         // == sin(colat)*cos(lon) == 0.5*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/drad",
                                     jac1.getElt(0,0),
                                     "~",
                                     SQ3/4,
                                     TIGHT_TOL );

         //
         // At pos, y == (rad)*sin(colat)*sin(lon); dy/drad
         // == sin(colat)*sin(lon) == 0.5*0.5
         //

         ok  = JNITestutils.chcksd ( "dy/drad",
                                     jac1.getElt(1,0),
                                     "~",
                                     0.25,
                                     TIGHT_TOL );

         //
         // At pos, z == (rad)*cos(colat); dz/drad
         // == cos(colat) == sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dz/drad",
                                     jac1.getElt(2,0),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );


         //
         // At pos, x == 2*sin(colat)*cos(lon); dx/dlon
         // == -2*sin(colat)*sin(lon) == -2 * 0.5 * 0.5
         //

         ok  = JNITestutils.chcksd ( "dx/dlon",
                                     jac1.getElt(0,2),
                                     "~",
                                     -0.5,
                                     TIGHT_TOL );
         //
         // At pos, y == 2*sin(colat)*sin(lon); dy/dlon
         // == 2*sin(colat)*cos(lon) == 2 * 0.5 * sqrt(3)/2
         //

         ok  = JNITestutils.chcksd ( "dy/dlon",
                                     jac1.getElt(1,2),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*cos(colat); dz/dlon == 0
         //

         ok  = JNITestutils.chcksd ( "dz/dlon",
                                     jac1.getElt(2,2),
                                     "~",
                                     0.0,
                                     TIGHT_TOL );

         //
         // At pos, x == 2*sin(colat)*cos(lon); dx/dcolat
         // == 2*cos(colat)*cos(lon) == 2*(sqrt(3)/2)*(sqrt(3)/2)
         //

         ok  = JNITestutils.chcksd ( "dx/dcolat",
                                     jac1.getElt(0,1),
                                     "~",
                                     1.5,
                                     TIGHT_TOL );

         //
         // At pos, y == 2*sin(colat)*sin(lon); dy/dcolat
         // == 2*cos(colat)*sin(lon) == sqrt(3)/2
         //
         ok  = JNITestutils.chcksd ( "dy/dlat",
                                     jac1.getElt(1,1),
                                     "~",
                                     SQ3/2,
                                     TIGHT_TOL );

         //
         // At pos, z == 2*cos(colat); dz/dcolat == -2*sin(colat) == -1
         //
         ok  = JNITestutils.chcksd ( "dz/dlat",
                                     jac1.getElt(2,1),
                                     "~",
                                     -1.0,
                                     TIGHT_TOL );





         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "getSphRecJacobian: verify Jacobian matrix " +
                              "is inverse of that obtained from " +
                              "getRecSphJacobian."                          );


         //
         // Generate the coordinates we'll use for the spherical-to-
         // rectangular transformation.

         longitude   = 30.0 * RPD;
         colatitude  = 30.0 * RPD;
         radius      = 6370.0;

         sph1   = new SphericalCoordinates( radius, colatitude, longitude );

         jac1   = sph1.getSphRecJacobian();

         pos    = sph1.toRectangular();

         jac2   = SphericalCoordinates.getRecSphJacobian( pos );

         invmat = jac2.invert();

         dist   = jac1.dist( invmat );


         ok  = JNITestutils.chcksd ( "dist",
                                     dist,
                                     "~",
                                     0.0,
                                     MED_TOL );

         //System.out.println( invmat );
      }

      catch ( SpiceException ex )
      {
         //
         //  Getting here means we've encountered an unexpected
         //  SPICE exception.  This is analogous to encountering
         //  an unexpected SPICE error in CSPICE.
         //

         ex.printStackTrace();

         ok = JNITestutils.chckth ( false, "", ex );
      }

      //
      // Retrieve the current test status.
      //
      ok = JNITestutils.tsuccess();

      return ( ok );
   }

}

