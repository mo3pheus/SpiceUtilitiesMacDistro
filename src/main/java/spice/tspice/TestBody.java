
package spice.tspice;


import java.io.*;
import java.util.*;
import spice.basic.*;
import spice.testutils.JNITestutils;
import spice.testutils.Testutils;


/**
Class TestBody provides methods that implement test families for
the class Body.

<h3> Version 2.0.0 28-DEC-2016 (NJB) </h3>

   Updated test cases to expect Body instances created from
   Strings to return the names used to create them when
   method getName is applied. Formerly the returned names were
   generated by converting the input name to an ID code, then
   translating that ID code to a name.

<h3> Version 1.1.0 11-APR-2011 (NJB) </h3>

   Added test cases for Body creation using either the
   name string "Solar System Barycenter" or the ID code 0.

<h3>Version 1.0.0 07-DEC-2009 (NJB)</h3>
*/
public class TestBody extends Object
{

   //
   // Class constants
   //
   private static String  PCK           = "string.tpc";


   //
   // Class variables
   //


   //
   // Methods
   //

   /**
   Test Body and associated classes.
   */
   public static boolean f_Body()

      throws SpiceException
   {
      //
      // Constants
      //

      final double                      TIGHT_TOL = 1.e-12;

      //
      // Local variables
      //
      Body                              b0;
      Body                              b1;
      Body                              b2;

      String                            name0;
      String                            name1;

      Vector3                           v0;

      boolean                           ok;

      double[]                          radii;

      int                               handle;
      int                               i;


      //
      //  We enclose all tests in a try/catch block in order to
      //  facilitate handling unexpected exceptions.  Unexpected
      //  exceptions are trapped by the catch block at the end of
      //  the routine; expected exceptions are handled locally by
      //  catch blocks associated with error handling test cases.
      //
      //  Therefore, JNISpice calls that are expected to succeed don't
      //  have any subsequent "chckxc" type calls following them, nor
      //  are they wrapped in in try/catch blocks.
      //
      //  Expected exceptions that are *not* thrown are tested
      //  via a call to {@link spice.testutils.Testutils#dogDidNotBark}.
      //

      try
      {

         JNITestutils.topen ( "f_Body" );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Setup: create and load kernels." );


         //
         // Clear the KernelDatabase system.
         //
         KernelDatabase.clear();

         JNITestutils.tstlsk();

         //
         // Delete PCK if it exists. Create and load a PCK file.
         //
         ( new File ( PCK ) ).delete();

         JNITestutils.tstpck( PCK, true, false );




         // ***********************************************************
         //
         //    Error cases
         //
         // ***********************************************************



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: create Body using blank body name." );

         try
         {
            b0 = new Body( " " );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(BLANKSTRING)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true,   "SPICE(BLANKSTRING)", ex );
         }



         //
         // --------Case-----------------------------------------------
         //
         JNITestutils.tcase (  "Error: create Body using empty body name." );

         try
         {
            b0 = new Body( "" );

            //
            // If an exception is *not* thrown, we'll hit this call.
            //

            Testutils.dogDidNotBark (  "SPICE(EMPTYSTRING)" );

         }
         catch ( SpiceException ex )
         {
            ok = JNITestutils.chckth ( true, "SPICE(EMPTYSTRING)", ex );
         }





         // ***********************************************************
         //
         //    Normal cases
         //
         // ***********************************************************




         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Create Body from name." );

         b0    = new Body( "Jupiter" );

         name0 = b0.getName();


         ok = JNITestutils.chcksc ( "name",
                                    name0,
                                    "=",
                                    "Jupiter" );


         ok = JNITestutils.chcksi ( "ID",
                                    b0.getIDCode(),
                                    "=",
                                    599,
                                    0               );

         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Create Body from name 'Solar System " +
                              "Barycenter' "                         );

         b1    = new Body( "Solar System Barycenter" );

         name1 = b1.getName();


         ok = JNITestutils.chcksc ( "name",
                                    name1,
                                    "=",
                                    "Solar System Barycenter" );


         ok = JNITestutils.chcksi ( "ID",
                                    b1.getIDCode(),
                                    "=",
                                    0,
                                    0               );


         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Create Body from ID code." );

         b0    = new Body( 699 );

         name0 = b0.getName();


         ok = JNITestutils.chcksc ( "name",
                                    name0,
                                    "=",
                                    "SATURN" );


         ok = JNITestutils.chcksi ( "ID",
                                    b0.getIDCode(),
                                    "=",
                                    699,
                                    0               );

         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Create Body from ID code 0" );

         //
         // Use the solar system barycenter as another test case.
         //
         b1    = new Body( 0 );

         name1 = b1.getName();


         ok = JNITestutils.chcksc ( "name",
                                    name1,
                                    "=",
                                    "SOLAR SYSTEM BARYCENTER" );


         ok = JNITestutils.chcksi ( "ID",
                                    b1.getIDCode(),
                                    "=",
                                    0,
                                    0               );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test copy constructor" );

         b0    = new Body( 699 );
         b2    = new Body( 699 );

         b1    = new Body( b0 );

         //
         // Make sure that changing b0 doesn't affect b1.
         //
         b0    = new Body( 399 );

         name1 = b1.getName();


         ok = JNITestutils.chcksc ( "name",
                                    name1,
                                    "=",
                                    "SATURN" );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test equality operator" );

         b0    = new Body( 699      );
         b1    = new Body( "saTurN" );
         b2    = new Body( "earth"  );

         //
         // Make sure that b0 and b1 are equal.
         //
         ok = JNITestutils.chcksl ( "b0 == b1",
                                    b0.equals( b1 ),
                                    true             );

         //
         // Make sure that b0 and b2 are not equal.
         //
         ok = JNITestutils.chcksl ( "b0 == b2",
                                    b0.equals( b2 ),
                                    false            );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test toString." );

         b0    = new Body( 699      );

         ok = JNITestutils.chcksc ( "string form of 699",
                                    b0.toString(),
                                    "=",
                                    "SATURN"             );



         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Test getValues" );

         b0    = new Body( "Earth"  );

         radii = b0.getValues( "RADII" );


         v0    = new Vector3( 6378.14, 6378.14, 6356.75 );

         ok = JNITestutils.chckad ( "radii",
                                    radii,
                                    "=",
                                    v0.toArray(),
                                    TIGHT_TOL        );
      }

      catch ( SpiceException ex )
      {
         //
         //  Getting here means we've encountered an unexpected
         //  SPICE exception.  This is analogous to encountering
         //  an unexpected SPICE error in CSPICE.
         //

         ex.printStackTrace();

         ok = JNITestutils.chckth ( false, "", ex );
      }

      finally
      {
         //
         // --------Case-----------------------------------------------
         //

         JNITestutils.tcase ( "Clean up." );


         //
         // Get rid of the PCK file.
         //
         ( new File ( PCK    ) ).delete();
      }

      //
      // Retrieve the current test status.
      //
      ok = JNITestutils.tsuccess();

      return ( ok );
   }

}

